#N canvas 85 65 472 375 12;
#X text 54 38 idiosyncracies in Gem objects;
#X text 54 53 =============================;
#X text 33 106 most (if not all) Gem objects share some common behaviour \, that you might want to be aware of \, in order to correctly and efficiently use them.;
#N canvas 2803 369 624 486 init-messages 0;
#X obj 85 146 rectangle 4 3 \; draw line \; width 3;
#X text 53 53 Gem objects accept additional creation arguments \, that can be used to send initial messages to the object.;
#X obj 377 181 rectangle 4 3;
#X obj 377 129 loadbang;
#X msg 377 154 draw line \, width 3;
#X text 207 157 is really¹ the same as;
#X text 67 230 ¹ init-messages are sent right after the object is created and before it gets connected to other objects. therefore you can only use them to set the internal state of an object \, but not to send data to downstream objects.;
#X obj 141 388 print buffersize;
#X obj 141 348 pix_buffer \$0-buf 10 \; bang;
#X text 71 309 e.g. querying the size of a [pix_buffer] with the following does not work:;
#X connect 3 0 4 0;
#X connect 4 0 2 0;
#X connect 8 0 7 0;
#X restore 61 204 pd init-messages;
#N canvas 2655 474 670 343 "gem_state" 0;
#X text 31 101 These messages can be created by [gemhead] and are then passed to downstream objects. You cannot (and shoud not attempt to) create such messages yourself.;
#X text 31 163 Typically these messages occur once per rendering tick (e.g. every 50ms) \, so it's easy to flood your Pd-console with printing them (or connecting the 1st outlet of a Gem object to an object that does not understand these messages), f 61;
#X text 31 25 Any Gem-object that can be used within a render-chain accepts a special Gem message with the selector "gem_state" on the 1st inlet \, and will also output such special Gem message on the 1st outlet.;
#X restore 61 171 pd "gem_state" messages;
